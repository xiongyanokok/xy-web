<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sharding="http://shardingjdbc.io/schema/shardingjdbc/sharding"
	xmlns:masterslave="http://shardingjdbc.io/schema/shardingjdbc/masterslave"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context.xsd 
                        http://shardingjdbc.io/schema/shardingjdbc/sharding 
                        http://shardingjdbc.io/schema/shardingjdbc/sharding/sharding.xsd 
                        http://shardingjdbc.io/schema/shardingjdbc/masterslave 
                        http://shardingjdbc.io/schema/shardingjdbc/masterslave/master-slave.xsd
                        ">

    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/db_0_master"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="50"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <property name="filters" value="stat" />
    </bean> -->
    
    <bean id="randomStrategy" class="io.shardingjdbc.core.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm" />
    
    <!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理 -->
	<masterslave:data-source id="db_0" master-data-source-name="db_0_master" slave-data-source-names="db_0_slave" strategy-type="ROUND_ROBIN"/>
	<masterslave:data-source id="db_1" master-data-source-name="db_1_master" slave-data-source-names="db_1_slave" strategy-type="ROUND_ROBIN"/>
	
	<!-- 分库策略 -->
	<sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="db_${user_id % 2}"/>
	
	<!-- 分表策略 -->
	<sharding:inline-strategy id="orderTableStrategy" sharding-column="order_id" algorithm-expression="t_order_${order_id % 2}"/>
	<sharding:inline-strategy id="orderItemTableStrategy" sharding-column="order_id" algorithm-expression="t_order_item_${order_id % 2}"/>
	
	<!-- 数据源 -->
	<sharding:data-source id="dataSource">
	    <sharding:sharding-rule data-source-names="db_0,db_1">
	        <sharding:table-rules>
	        	<!-- 表规则 --><!-- t_order_${0..1} ==> t_order_0,t_order_1 -->
	            <sharding:table-rule logic-table="t_order" actual-data-nodes="db_${0..1}.t_order_${0..1}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy"/>
	            <sharding:table-rule logic-table="t_order_item" actual-data-nodes="db_${0..1}.t_order_item_${0..1}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderItemTableStrategy"/>
	        </sharding:table-rules>
	    </sharding:sharding-rule>
	</sharding:data-source>
	
</beans>